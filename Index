<!doctype html>
<html lang="sv">
<head>
  <meta charset="utf-8" />
  <meta name="viewport" content="width=device-width,initial-scale=1" />
  <title>Tankekarta Live</title>
  <style>
    :root {
      --bg:#0f172a; --panel:#111827; --text:#e5e7eb; --muted:#9ca3af;
      --idea:#22c55e; --problem:#ef4444; --solution:#3b82f6; --person:#f59e0b; --place:#a855f7;
      --chip:#1f2937; --accent:#14b8a6;
    }
    *{box-sizing:border-box}
    body{margin:0;background:var(--bg);color:var(--text);font-family:system-ui,-apple-system,Segoe UI,Roboto}
    header{display:flex;gap:12px;align-items:center;padding:12px 16px;background:#0b1220;position:sticky;top:0;z-index:10;border-bottom:1px solid #1f2937}
    header h1{font-size:18px;margin:0 12px 0 0}
    header input, header select{background:var(--panel);border:1px solid #1f2937;color:var(--text);padding:8px 10px;border-radius:8px}
    header button{background:var(--accent);color:#062a29;border:none;padding:8px 12px;border-radius:8px;font-weight:600;cursor:pointer}
    header button.secondary{background:#1f2937;color:var(--text);border:1px solid #374151}
    #app{display:grid;grid-template-columns:340px 1fr;height:calc(100vh - 58px)}
    aside{background:#0b1220;border-right:1px solid #1f2937;padding:12px;overflow:auto}
    .group{margin-bottom:14px}
    .label{font-size:12px;color:var(--muted);margin-bottom:6px}
    textarea,.field{width:100%;background:var(--panel);border:1px solid #1f2937;color:var(--text);padding:10px;border-radius:8px}
    textarea{min-height:90px;resize:vertical}
    .row{display:flex;gap:8px}
    .chips{display:flex;flex-wrap:wrap;gap:6px;margin-top:6px}
    .chip{background:var(--chip);border:1px solid #253045;color:var(--text);padding:6px 8px;border-radius:999px;font-size:12px;cursor:pointer}
    .chip.active{border-color:var(--accent);color:var(--accent)}
    .legend{display:flex;gap:8px;flex-wrap:wrap}
    .dot{width:10px;height:10px;border-radius:50%;display:inline-block;margin-right:6px}
    .type-idea{background:var(--idea)} .type-problem{background:var(--problem)} .type-solution{background:var(--solution)}
    .type-person{background:var(--person)} .type-place{background:var(--place)}
    #canvasWrap{position:relative;background:#0a1324}
    svg{width:100%;height:100%}
    .node{cursor:pointer}
    .node circle{stroke:#0f172a;stroke-width:2}
    .node text{fill:#e5e7eb;font-size:12px;pointer-events:none}
    .link{stroke:#334155;stroke-width:1.2}
    .toolbar{position:absolute;top:10px;right:10px;display:flex;gap:8px}
    .toolbar button{background:#0b1220;color:var(--text);border:1px solid #1f2937;padding:8px 10px;border-radius:8px;cursor:pointer}
    .footer{font-size:12px;color:var(--muted);margin-top:6px}
  </style>
</head>
<body>
  <header>
    <h1>Tankekarta Live</h1>
    <input id="search" placeholder="S√∂k i tankar‚Ä¶" />
    <select id="filterType">
      <option value="">Alla typer</option>
      <option value="id√©">Id√©</option>
      <option value="problem">Problem</option>
      <option value="l√∂sning">L√∂sning</option>
      <option value="person">Person</option>
      <option value="plats">Plats</option>
    </select>
    <select id="filterEmotion">
      <option value="">Alla k√§nslor</option>
      <option>gl√§dje</option><option>oro</option><option>ilska</option><option>fokus</option><option>nyfikenhet</option>
    </select>
    <button id="exportBtn" class="secondary">Exportera PNG</button>
    <button id="resetBtn" class="secondary">Rensa karta</button>
  </header>

  <div id="app">
    <aside>
      <div class="group">
        <div class="label">Ny tanke</div>
        <textarea id="text" placeholder="Skriv din tanke‚Ä¶"></textarea>
      </div>
      <div class="group row">
        <div class="field">
          <div class="label">Typ</div>
          <select id="type">
            <option>id√©</option><option>problem</option><option>l√∂sning</option><option>person</option><option>plats</option>
          </select>
        </div>
        <div class="field">
          <div class="label">K√§nsla</div>
          <select id="emotion">
            <option>fokus</option><option>gl√§dje</option><option>oro</option><option>ilska</option><option>nyfikenhet</option>
          </select>
        </div>
      </div>
      <div class="group">
        <div class="label">Taggar</div>
        <div id="tags" class="chips"></div>
        <input id="tagInput" class="field" placeholder="L√§gg till tagg och tryck Enter" />
      </div>
      <div class="row">
        <button id="addBtn">L√§gg till</button>
        <button id="micBtn" class="secondary">üé§ Tala</button>
      </div>
      <div class="group">
        <div class="label">F√∂rklaring typf√§rger</div>
        <div class="legend">
          <span><span class="dot type-idea"></span>Id√©</span>
          <span><span class="dot type-problem"></span>Problem</span>
          <span><span class="dot type-solution"></span>L√∂sning</span>
          <span><span class="dot type-person"></span>Person</span>
          <span><span class="dot type-place"></span>Plats</span>
        </div>
      </div>
      <div class="footer">Data sparas lokalt i din webbl√§sare (ingen molnlagring i denna MVP).</div>
    </aside>

    <div id="canvasWrap">
      <div class="toolbar">
        <button id="fitBtn">Auto-placera</button>
        <button id="liveBtn" class="secondary" title="Mock: markerar live-l√§ge">Live-l√§ge</button>
      </div>
      <svg id="svg"></svg>
    </div>
  </div>

  <script>
    // --- Enkel datamodell & lagring ---
    const storeKey = 'tankekarta-live-v1';
    let state = { nodes: [], links: [], tags: new Set(), live:false };
    const colors = { 'id√©':'#22c55e', 'problem':'#ef4444', 'l√∂sning':'#3b82f6', 'person':'#f59e0b', 'plats':'#a855f7' };

    function load() {
      const raw = localStorage.getItem(storeKey);
      if (raw) {
        const parsed = JSON.parse(raw);
        parsed.tags = new Set(parsed.tags || []);
        state = parsed;
      }
      renderTags();
      render();
    }
    function save() {
      localStorage.setItem(storeKey, JSON.stringify({
        nodes: state.nodes,
        links: state.links,
        tags: [...state.tags],
        live: state.live
      }));
    }

    // --- UI-element ---
    const svg = document.getElementById('svg');
    const addBtn = document.getElementById('addBtn');
    const micBtn = document.getElementById('micBtn');
    const textEl = document.getElementById('text');
    const typeEl = document.getElementById('type');
    const emotionEl = document.getElementById('emotion');
    const tagsWrap = document.getElementById('tags');
    const tagInput = document.getElementById('tagInput');
    const searchEl = document.getElementById('search');
    const filterTypeEl = document.getElementById('filterType');
    const filterEmotionEl = document.getElementById('filterEmotion');
    const fitBtn = document.getElementById('fitBtn');
    const exportBtn = document.getElementById('exportBtn');
    const resetBtn = document.getElementById('resetBtn');
    const liveBtn = document.getElementById('liveBtn');

    // --- Taggar ---
    function renderTags() {
      tagsWrap.innerHTML = '';
      [...state.tags].forEach(t => {
        const chip = document.createElement('span');
        chip.className = 'chip';
        chip.textContent = t;
        chip.onclick = () => chip.classList.toggle('active');
        tagsWrap.appendChild(chip);
      });
    }
    tagInput.addEventListener('keydown', (e) => {
      if (e.key === 'Enter' && tagInput.value.trim()) {
        state.tags.add(tagInput.value.trim());
        tagInput.value = '';
        renderTags(); save();
      }
    });

    // --- L√§gg till nod ---
    addBtn.onclick = () => {
      const text = textEl.value.trim();
      if (!text) return;
      const id = Date.now().toString();
      const tags = [...document.querySelectorAll('.chip.active')].map(c => c.textContent);
      const node = {
        id, text, type:typeEl.value, emotion:emotionEl.value, tags,
        x: Math.random()*window.innerWidth, y: Math.random()*window.innerHeight,
        createdAt: new Date().toISOString()
      };
      state.nodes.push(node);
      // Skapa enkla l√§nkar baserat p√• tagg-√∂verlappar
      state.nodes.forEach(n => {
        if (n.id !== node.id && overlap(n.tags, node.tags) > 0) {
          state.links.push({ source: node.id, target: n.id, weight: overlap(n.tags, node.tags) });
        }
      });
      textEl.value = '';
      document.querySelectorAll('.chip.active').forEach(c => c.classList.remove('active'));
      render(); save();
    };
    function overlap(a,b){ const as=new Set(a||[]); let c=0; (b||[]).forEach(t=>{ if(as.has(t)) c++; }); return c; }

    // --- R√∂stinmatning (Web Speech API) ---
    let recognizing = false;
    micBtn.onclick = async () => {
      const SR = window.SpeechRecognition || window.webkitSpeechRecognition;
      if (!SR) { alert('R√∂stinmatning st√∂ds inte i denna webbl√§sare.'); return; }
      const rec = new SR();
      rec.lang = 'sv-SE';
      rec.interimResults = false;
      rec.maxAlternatives = 1;
      rec.onstart = () => { recognizing = true; micBtn.textContent = '‚èπ Stoppa'; };
      rec.onresult = (e) => {
        const transcript = e.results[0][0].transcript;
        textEl.value = (textEl.value + ' ' + transcript).trim();
      };
      rec.onerror = () => { recognizing = false; micBtn.textContent = 'üé§ Tala'; };
      rec.onend = () => { recognizing = false; micBtn.textContent = 'üé§ Tala'; };
      if (!recognizing) rec.start();
    };

    // --- Filter & s√∂k ---
    [searchEl, filterTypeEl, filterEmotionEl].forEach(el => el.addEventListener('input', render));

    // --- Auto-placera (enkel kraftlayout) ---
    fitBtn.onclick = () => { layout(); render(); save(); };

    // --- Export PNG ---
    exportBtn.onclick = () => exportPNG();

    // --- Reset ---
    resetBtn.onclick = () => {
      if (confirm('Rensa hela kartan?')) {
        state.nodes = []; state.links = []; save(); render();
      }
    };

    // --- Live mock ---
    liveBtn.onclick = () => { state.live = !state.live; liveBtn.classList.toggle('active'); liveBtn.textContent = state.live ? 'Live-l√§ge: P√•' : 'Live-l√§ge'; save(); };

    // --- Layout (f√∂renklad force/radial) ---
    function layout() {
      const center = { x: window.innerWidth/2, y: (window.innerHeight-58)/2 };
      const byType = { 'id√©':[], 'problem':[], 'l√∂sning':[], 'person':[], 'plats':[] };
      state.nodes.forEach(n => byType[n.type].push(n));
      const rings = Object.keys(byType);
      const radiusStep = Math.min(center.x, center.y) / (rings.length+1);
      rings.forEach((type, i) => {
        const ring = byType[type];
        const r = radiusStep*(i+1);
        ring.forEach((n, idx) => {
          const angle = (2*Math.PI * idx) / Math.max(1, ring.length);
          n.x = center.x + r*Math.cos(angle);
          n.y = center.y + r*Math.sin(angle);
        });
      });
    }

    // --- Rendera ---
    function render() {
      // Filter
      const q = (searchEl.value||'').toLowerCase();
      const fType = filterTypeEl.value;
      const fEmotion = filterEmotionEl.value;
      const visible = new Set(state.nodes.filter(n =>
        (!q || n.text.toLowerCase().includes(q) || (n.tags||[]).some(t=>t.toLowerCase().includes(q))) &&
        (!fType || n.type===fType) &&
        (!fEmotion || n.emotion===fEmotion)
      ).map(n=>n.id));

      // Rensa SVG
      while (svg.firstChild) svg.removeChild(svg.firstChild);

      // L√§nkar
      state.links.forEach(l => {
        if (!visible.has(l.source) || !visible.has(l.target)) return;
        const a = state.nodes.find(n=>n.id===l.source);
        const b = state.nodes.find(n=>n.id===l.target);
        const line = document.createElementNS('http://www.w3.org/2000/svg','line');
        line.setAttribute('x1', a.x); line.setAttribute('y1', a.y);
        line.setAttribute('x2', b.x); line.setAttribute('y2', b.y);
        line.setAttribute('class','link');
        line.setAttribute('stroke-opacity', Math.min(0.8, 0.3 + (l.weight||1)*0.2));
        svg.appendChild(line);
      });

      // Noder
      state.nodes.forEach(n => {
        if (!visible.has(n.id)) return;
        const g = document.createElementNS('http://www.w3.org/2000/svg','g');
        g.setAttribute('class','node');
        g.setAttribute('transform', `translate(${n.x},${n.y})`);
        // Draggable
        let dragging=false, ox=0, oy=0;
        g.addEventListener('mousedown', (e)=>{ dragging=true; ox=e.offsetX-n.x; oy=e.offsetY-n.y; });
        svg.addEventListener('mousemove', (e)=>{ if(dragging){ n.x=e.offsetX-ox; n.y=e.offsetY-oy; render(); }});
        window.addEventListener('mouseup', ()=>{ if(dragging){ dragging=false; save(); }});
        // Circle
        const c = document.createElementNS('http://www.w3.org/2000/svg','circle');
        c.setAttribute('r', 28 + Math.min(20,(n.tags||[]).length*2));
        c.setAttribute('fill', colors[n.type] || '#64748b');
        c.setAttribute('fill-opacity','0.85');
        g.appendChild(c);
        // Text
        const t = document.createElementNS('http://www.w3.org/2000/svg','text');
        t.setAttribute('text-anchor','middle'); t.setAttribute('dy','.35em');
        t.textContent = n.text.length>28 ? (n.text.slice(0,27)+'‚Ä¶') : n.text;
        g.appendChild(t);
        // Subtitle
        const s = document.createElementNS('http://www.w3.org/2000/svg','text');
        s.setAttribute('text-anchor','middle'); s.setAttribute('dy','2.2em');
        s.setAttribute('fill','#cbd5e1'); s.setAttribute('font-size','10');
        s.textContent = `${n.type} ¬∑ ${n.emotion}`;
        g.appendChild(s);

        // Click -> detaljer
        g.addEventListener('click', ()=>{
          alert(`${n.text}\n\nTyp: ${n.type}\nK√§nsla: ${n.emotion}\nTaggar: ${(n.tags||[]).join(', ') || '‚Äì'}\nSkapad: ${new Date(n.createdAt).toLocaleString()}`);
        });

        svg.appendChild(g);
      });

      // Bakgrundsgrid (l√§tt)
      const bg = document.createElementNS('http://www.w3.org/2000/svg','rect');
      bg.setAttribute('x',0); bg.setAttribute('y',0);
      bg.setAttribute('width','100%'); bg.setAttribute('height','100%');
      bg.setAttribute('fill','transparent'); // klick f√•ngar inte
      svg.insertBefore(bg, svg.firstChild);
    }

    // --- Exportera PNG ---
    function exportPNG() {
      const bbox = svg.getBoundingClientRect();
      const canvas = document.createElement('canvas');
      canvas.width = bbox.width; canvas.height = bbox.height;
      const ctx = canvas.getContext('2d');

      // SVG till PNG via data URL
      const serializer = new XMLSerializer();
      const source = serializer.serializeToString(svg);
      const svgBlob = new Blob([source], {type:'image/svg+xml;charset=utf-8'});
      const url = URL.createObjectURL(svgBlob);
      const img = new Image();
      img.onload = () => {
        ctx.fillStyle = '#0a1324'; ctx.fillRect(0,0,canvas.width,canvas.height);
        ctx.drawImage(img,0,0);
        URL.revokeObjectURL(url);
        const a = document.createElement('a');
        a.download = 'tankekarta.png';
        a.href = canvas.toDataURL('image/png');
        a.click();
      };
      img.src = url;
    }

    // Init
    window.addEventListener('resize', ()=>render());
    load();
    // F√∂rsta auto-placering om tom
    if (state.nodes.length===0) setTimeout(()=>{ layout(); render(); }, 200);
  </script>
</body>
</html>
